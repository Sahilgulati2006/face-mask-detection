# -*- coding: utf-8 -*-
"""face mask detection using convolutional neural network

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1recdFB0W6sh3aZKYMxasdkolOz-jnSOm

**Face Mask Detection using Convolutional Neural Network**

This script demonstrates the implementation of a CNN to detect face masks in images.
It is designed to run on Google Colab and uses TensorFlow/Keras for building the model.

# **Setting up Kaggle API credentials for dataset access**
"""

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

"""# **Downloading the face mask dataset from Kaggle**"""

!kaggle datasets download -d omkargurav/face-mask-dataset

"""# **Extracting the dataset from the zip file**"""

from zipfile import ZipFile
file_name = '/content/face-mask-dataset.zip'
with ZipFile(file_name,'r') as zip:
  zip.extractall()
  print('file extracted')

!ls

"""# **Importing necessary libraries**"""

import os
import numpy as np
import pandas
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import tensorflow as tf
tf.random.set_seed(3)
from tensorflow import keras
import cv2
from google.colab.patches import cv2_imshow
from PIL import Image
from sklearn.model_selection import train_test_split

"""# **Listing files for images with and without masks**"""

with_mask_files = os.listdir('/content/data/with_mask')
print(with_mask_files[0:5])

without_mask_files = os.listdir('/content/data/without_mask')
print(without_mask_files[0:5])

print('number of mask images = ', len(with_mask_files))
print('number of without mask images = ', len(without_mask_files))

"""# **Creating labels for the dataset**
# Mask = 1, No Mask = 0
"""

with_mask_labels = [1]*3725
without_mask_labels = [0]*3828
labels = with_mask_labels + without_mask_labels

"""# **Displaying example images from the dataset**"""

img = mpimg.imread('/content/data/with_mask/with_mask_10.jpg')
imgplot = plt.imshow(img)
plt.show()

img = mpimg.imread('/content/data/without_mask/without_mask_10.jpg')
imgplot = plt.imshow(img)
plt.show()

"""# **Image Preprocessing: Converting images to numpy arrays**
# For images without masks
"""

# For images without masks
#converting image to numpy array
without_mask = '/content/data/without_mask'
data = []
for img_file in without_mask_files:
  image = Image.open(without_mask +'/' + img_file)
  image = image.resize((100,100))
  image = image.convert('RGB')
  image = np.array(image)
  data.append(image)


# For images with masks
#converting image to numpy array
with_mask = '/content/data/with_mask'

for img_file in with_mask_files:
  image = Image.open(with_mask +'/' + img_file)
  image = image.resize((100,100))
  image = image.convert('RGB')
  image = np.array(image)
  data.append(image)

type(data)

len(data)

type(data[0])

data[0].shape

"""# **Converting the list of images to a numpy array**"""

x = np.array(data)
y = np.array(labels)

print(x.shape, y.shape)

"""# **Splitting the data into training and testing sets**"""

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.2, random_state = 3)

print(x_train.shape, x_test.shape, y_train.shape, y_test.shape)

"""# **Scaling the pixel values to the range [0, 1]**"""

#scaling data
x_train_scaled = x_train/255
x_test_scaled = x_test/255

"""# **Building the Convolutional Neural Network (CNN)**"""

num_classes = 2
model = keras.Sequential([
    keras.layers.Conv2D(32, kernel_size = (3,3), activation = 'relu', input_shape = (100,100,3)),
    keras.layers.MaxPooling2D((2,2)),

    keras.layers.Conv2D(64, kernel_size = (3,3), activation = 'relu'),
    keras.layers.MaxPooling2D((2,2)),

    keras.layers.Flatten(),
    keras.layers.Dropout(0.3),
    keras.layers.Dense(128, activation = 'relu'),
    keras.layers.Dropout(0.3),

    keras.layers.Dense(64, activation = 'relu'),
    keras.layers.Dropout(0.3),

    keras.layers.Dense(num_classes, activation ='sigmoid')

])

"""# **Compiling the model**"""

model.compile(optimizer = 'adam',
               loss = 'sparse_categorical_crossentropy',
               metrics = ['accuracy'])

"""# **Training the model**"""

history = model.fit(x_train_scaled, y_train, validation_split = 0.1, epochs = 7)

"""# **Evaluating the model**"""

loss, accuracy = model.evaluate(x_test_scaled,y_test)

"""# **Plotting loss/accuracy**"""

h = history
plt.plot(h.history['accuracy'], label = 'train accuracy')
plt.plot(h.history['val_accuracy'], label = ' validation accuracy')
plt.legend()
plt.show()

plt.plot(h.history['loss'], label = 'train loss')
plt.plot(h.history['val_loss'], label = ' validation loss')
plt.legend()
plt.show()

"""# **Predictive system: Making predictions on a new image**"""

input_img_path = input('path of image to be predicted: ')
input_img = cv2.imread(input_img_path)
cv2_imshow(input_img)

input_img_resize = cv2.resize(input_img, (100,100))
input_img_scaled = input_img_resize/255
input_img_reshaped = np.reshaped(1,100,100,3)

"""# **Decoding the prediction**"""

prediction = model.predict(input_img_reshaped)
print(prediction)

input_prediction_label = np.argmax(prediction)
print(input_prediction_label)
if input_prediction_label ==0:
  print('person is wearing mask')
else:
  print('person is not wearing mask')